% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json_complexity.r
\name{json_complexity}
\alias{json_complexity}
\title{Add a column that contains the complexity (recursively unlisted length) of the JSON data}
\usage{
json_complexity(x, column.name = "complexity")
}
\arguments{
\item{x}{a tbl_json object}

\item{column.name}{the name to specify for the length column}
}
\value{
a tbl_json object with column.name column that tells the length
}
\description{
When investigating complex JSON data it can be helpful to identify the
complexity of deeply nested documents. The json_complexity() function adds a
column (default name "complexity") that contains the 'complexity' of the JSON
associated with each row. Essentially, every on-null scalar value is found in the
object by recursively stripping away all objects or arrays, and the complexity
is the count of these scalar values. Note that 'null' has complexity 0.
}
\examples{
library(magrittr)  # for \%>\%
c('[1, 2, [3, 4]]', '{"k1": 1, "k2": [2, [3, 4]]}', '1', {}) \%>\%
  json_lengths \%>\% json_complexity
}

