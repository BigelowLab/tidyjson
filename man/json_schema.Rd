% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json_schema.R
\name{json_schema}
\alias{json_schema}
\title{Create a schema for a JSON document or collection}
\usage{
json_schema(x, type = c("string", "value"))
}
\arguments{
\item{x}{a json string or a tbl_json object}

\item{type}{whether to capture scalar nodes using the string that defines
their type (e.g., "logical") or as a representative value
(e.g., "true"), useful in conjunction with plot_json_graph}
}
\value{
a character string JSON document that represents the schema of
        the collection
}
\description{
Returns a JSON document that captures the 'schema' of the collection of
document(s) passed in, as a JSON string. The schema collapses complex
JSON into a simple form using the following rules:
}
\details{
\itemize{
  \item string  -> "string",       e.g., "a sentence" -> "string"
  \item number  -> "number",       e.g., 32000.1 -> "number"
  \item true    -> "logical",      e.g., true -> "logical"
  \item false   -> "logical",      e.g., false -> "logical"
  \item null    -> "null",         e.g., null -> "null"
  \item array   -> [<type>]        e.g., [1, 2] -> ["number"]
  \item object  -> {"key": <type>} e.g., {"age": 32} -> {"age": "number"}
}

For more complex JSON objects, ties are broken by taking the most
complex example (using \code{json_complexity}), and then by type
(using \code{json_types}).

This means that if a key has varying schema across documents, the
most complex schema will be chosen as being representative. Similarly,
if the elements of an array vary in schema, the most complex element is
chosen, and if arrays vary in schema across documents, the most
complex is chosen.
}
\examples{

# A simple string
'"string"' \%>\% json_schema

# A simple object
'{"key": "value"}' \%>\% json_schema

# A complex array is represented by the most complex example
'[{"a": 1}, [1, 2], "a", 1, true, null]' \%>\% json_schema

# Companies example
companies[1] \%>\% json_schema \%>\% plot_json_graph

# Github issues
issues_array <- issues \%>\% gather_array # issues are one large array
# analyze first 5, and use type = "value" to ensure proper coloring of graph
issues_schema <- issues_array[1:5, ] \%>\% json_schema(type = "value")
issues_schema \%>\% plot_json_graph
}

